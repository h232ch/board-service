apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-sidecar-config
  namespace: board-service
  labels:
    app: board-service
    component: logging
data:
  vector.yaml: |
    api:
      enabled: true
      address: "0.0.0.0:8686"
    
    sources:
      nginx_logs:
        type: "file"
        include:
          - "/var/log/app/board-service/nginx/*.log"
        read_from: "beginning"
        ignore_older_secs: 86400  # Ignore logs older than 24 hours
      
      backend_logs:
        type: "file"
        include:
          - "/var/log/app/board-service/nodejs/*.log"
        read_from: "beginning"
        ignore_older_secs: 86400  # Ignore logs older than 24 hours
    
    transforms:
      parse_nginx:
        type: "remap"
        inputs: ["nginx_logs"]
        source: |
          # Parse nginx access logs
          if exists(.message) {
            # Extract timestamp, IP, method, URL, status, etc.
            parsed = parse_nginx_log!(.message, "combined")
            .timestamp = parsed.timestamp
            .remote_addr = parsed.remote_addr
            .method = parsed.method
            .url = parsed.url
            .status = parsed.status
            .body_bytes_sent = parsed.body_bytes_sent
            .http_referer = parsed.http_referer
            .http_user_agent = parsed.http_user_agent
            .http_x_forwarded_for = parsed.http_x_forwarded_for
            
            # Add metadata
            .component = "nginx"
            .service = "board-service"
            .pod_name = get_env_var!("POD_NAME")
            .namespace = get_env_var!("POD_NAMESPACE")
            
            # Remove original message to avoid duplication
            del(.message)
          }
      
      parse_backend:
        type: "remap"
        inputs: ["backend_logs"]
        source: |
          # Parse backend JSON logs
          if exists(.message) {
            # Parse JSON if it's a JSON log
            if is_string(.message) {
              parsed = parse_json!(.message)
              if is_object(parsed) {
                # Merge parsed fields - use merge! for infallible assignment
                . = merge!(., parsed)
              }
            }
            
            # Add metadata
            .component = "backend"
            .service = "board-service"
            .pod_name = get_env_var!("POD_NAME")
            .namespace = get_env_var!("POD_NAMESPACE")
            
            # Ensure timestamp exists
            if !exists(.timestamp) {
              .timestamp = now()
            }
          }
      
      add_metadata:
        type: "remap"
        inputs: ["parse_nginx", "parse_backend"]
        source: |
          # Add common metadata to all logs
          .cluster = "minikube"
          .environment = "development"
          .vector_version = "0.35.0"
          
          # Add Kubernetes metadata
          .kubernetes = {
            "pod_name": get_env_var!("POD_NAME"),
            "namespace": get_env_var!("POD_NAMESPACE"),
            "container_name": get_env_var!("CONTAINER_NAME")
          }
    
    sinks:
      # JSON console output for easy testing and verification
      json_console:
        type: "console"
        inputs: ["add_metadata"]
        encoding:
          codec: "json"
          timestamp_format: "rfc3339"
      
      # TODO: Replace with Kafka configuration later
      # kafka_output:
      #   type: "kafka"
      #   inputs: ["add_metadata"]
      #   bootstrap_servers: ["kafka:9092"]
      #   topic: "board-service-logs"
      #   encoding:
      #     codec: "json"
